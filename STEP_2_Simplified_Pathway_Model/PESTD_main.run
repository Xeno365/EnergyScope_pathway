################################################################################
################################################################################
##																			  ##
##                     			SETTING PROBLEM								  ##
##																			  ##
################################################################################
################################################################################

#Load Pathway specific set/param ...

model PESTD_model.mod;

data PESTD_data_year_related.dat; # not TDs depending data
data PESTD_data_all_years.dat; # not TDs depending data
data PESTD_data_efficiencies.dat; # not TDs depending data
data PESTD_12TD.dat; # TDs depending data
data PESTD_data_set_AGE.dat;  # To take into account the new formulation of aging TECH
data PESTD_data_decom_allowed.dat;  # To take into account the new formulation of aging TECH
data PESTD_data_years_done.dat;

#Initialisation:
model PESTD_initialise_2020.mod;

################################################################################
################################################################################
##																			  ##
##                      	SOLVER OPTIONS       							  ##
##																			  ##
################################################################################
################################################################################

option solver './cplex';

option show_stats 1; # show statistics
option times 1; # show time
option gentimes 1; # show time

option cplex_options  'mipdisplay 5 mipinterval 1000';
option log_file 'log.txt';   #write the log in a .txt file. Create the file before running.


option cplex_options $cplex_options 'mipgap 0.01 ';
option cplex_options $cplex_options 'baropt predual=-1';
#option cplex_options $cplex_options 'timelimit 600 ';


/*
# Save pool of solutions
option cplex_options "poolstub=PoolSol poolcapacity=10 \
populate=1 poolintensity=4 poolreplace=2";
*/

################################################################################
################################################################################
##																			  ##
##                      	RUN & SAVE PATH      							  ##
##																			  ##
################################################################################
################################################################################


param PathName symbolic default "output";

################   MOB    ########################

for {p in PHASE} {	let max_inv_phase[p] := 1e9;}#Do not limit the emissions per phases
let gwp_limit_transition := 1e15;#MIN on MILP : 1553027

for {y in YEARS} {
let storage_charge_time[y,"BEV_BATT"] := 2;
let storage_discharge_time[y,"BEV_BATT"] := 2;
}

		print PathName;

		# Saving and starting from last solution. Starting from last solution is not very efficient.
		# option cplex_options $cplex_options 'startsol ./output/solution.sol '; # to read previously existing file
		# option cplex_options $cplex_options 'endsol ./output/solution.sol '; # to write file

		# option cplex_options $cplex_options 'startbasis ./output/solution.bas '; # to read previously existing path
		# option cplex_options $cplex_options 'endbasis ./output/solution.bas '; # to write how to solve


    #option cplex_options 'iisfind=1';#To show the infeasible constraints
	#option cplex_options $cplex_options 'bardisplay 1';

	# These 3 lines are necessary to reset the solver between 2 runs. Indeed, it is much faster. Why?
	option reset_initial_guesses 1; # Do not use previous solution (it takes more time 10 times more :/...)
	option dual_initial_guesses 0;
	option send_statuses 0;

		solve;

   # Show the infeasible constraints

		display solve_result_num;
		display _solve_elapsed_time;
    #display _varname, _var.iis, _conname, _con.iis;

		## Saving sets and parameters to output file

		option times 0; # show time
		option gentimes 0; # show time


   #display {i in 1.._ncons: _con[i].iis <> 'non'} (_conname[i],_con[i].iis);
   #display {j in 1.._nvars: _var[j].iis <> 'non'} (_varname[j],_var[j].iis);

		if solve_result = "limit" # To avoid post treatment error
		then print "TIME OUT";
		else {

		print "%f\n",sum {y in YEARS} TotalGWP [y] * t_phase;

			let PathName := "output/";

			## Print yearly cost into text file.
			print "--------------SAVING OPEX -----------";
			printf "C_opex(years)\t" > (PathName & "/OPEX_YEARLY.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/OPEX_YEARLY.txt");
			}
			printf "\n \t"  >> (PathName & "/OPEX_YEARLY.txt");
				for {y in YEARS}{
					printf " %.6f\t", C_opex[y] >> (PathName & "/OPEX_YEARLY.txt");
			}

			## Print true cost into text file.
			print "--------------SAVING PHASE COST-----------";
			printf "Phase_cost\t" > (PathName & "/PHASE_COST.txt");
			for {p in PHASE}{
				printf "%s\t", p >> (PathName & "/PHASE_COST.txt");
			}
			printf "\n with_annualised\t"  >> (PathName & "/PHASE_COST.txt");
			for {p in PHASE, y_start in PHASE_START[p], y_stop in PHASE_STOP[p]}{
				printf " %.6f\t", C_inv_phase[p] + t_phase * (C_opex[y_start]+C_opex[y_stop])/2 * annualised_factor[p] - sum {i in TECHNOLOGIES} C_inv_return[i,p] >> (PathName & "/PHASE_COST.txt");
			}
			printf "\n without_annualised\t"  >> (PathName & "/PHASE_COST.txt");
			for {p in PHASE, y_start in PHASE_START[p], y_stop in PHASE_STOP[p]}{
				printf " %.6f\t", C_inv_phase[p]/annualised_factor[p] + t_phase * (C_opex[y_start]+C_opex[y_stop])/2 * annualised_factor[p]/annualised_factor[p] - sum {i in TECHNOLOGIES} C_inv_return[i,p]/annualised_factor[p] >> (PathName & "/PHASE_COST.txt");
			}
			printf "\n Investment\t"  >> (PathName & "/PHASE_COST.txt");
			for {p in PHASE}{
				printf " %.6f\t", C_inv_phase[p] >> (PathName & "/PHASE_COST.txt");
			}
			printf "\n Return\t"  >> (PathName & "/PHASE_COST.txt");
			for {p in PHASE}{
				printf " %.6f\t", - sum {i in TECHNOLOGIES} C_inv_return[i,p] >> (PathName & "/PHASE_COST.txt");
			}
			printf "\n Inv_and_return\t"  >> (PathName & "/PHASE_COST.txt");
			for {p in PHASE}{
				printf " %.6f\t", C_inv_phase[p] - sum {i in TECHNOLOGIES} C_inv_return[i,p] >> (PathName & "/PHASE_COST.txt");
			}
			printf "\n Opex\t"  >> (PathName & "/PHASE_COST.txt");
			for {p in PHASE, y_start in PHASE_START[p], y_stop in PHASE_STOP[p]}{
				printf " %.6f\t", t_phase * (C_opex[y_start]+C_opex[y_stop])/2 * annualised_factor[p] >> (PathName & "/PHASE_COST.txt");
			}


			## Print yearly cost into text file.
			print "--------------SAVING CAPEX PHASE-----------";
			printf "C_capex(phase)\t" > (PathName & "/CAPEX_PHASE.txt");
			for {p in PHASE}{
				printf "%s\t", p >> (PathName & "/CAPEX_PHASE.txt");
			}
			printf "\n \t"  >> (PathName & "/CAPEX_PHASE.txt");
				for {p in PHASE}{
					printf " %.6f\t", C_inv_phase[p] >> (PathName & "/CAPEX_PHASE.txt");
			}

			## Print yearly cost into text file.
			print "--------------SAVING TOTAL COST-----------";
			printf " %.6f\t", TotalTransitionCost > (PathName & "/TOTAL_COST.txt");


			## Print true cost into text file.
			print "--------------SAVING TRUE COST-----------";
			printf " %.6f\t", TotalTransitionCost - sum {i in TECHNOLOGIES} C_inv ["YEAR_2020",i] - C_opex["YEAR_2020"] > (PathName & "/TRUE_COST.txt");


			## Print Phase info to txt file.
			print "--------------SAVING PHASE -----------";
			printf "%s\t%s\t%s\t%s\n", "Phase", "Inv.", "Inv. max", "YEAR - 2020 = ?" > (PathName & "/phase.txt");
			for {p in PHASE}{
				printf "%s\t%.6f\t%.6f\t%.6f\n", p, C_inv_phase[p], max_inv_phase[p], diff_2020_phase[p]   >> (PathName & "/phase.txt");
			}
			## Print F_new info to txt file.
			print "--------------SAVING F_new (phase) -----------";
			printf "TECH\t" > (PathName & "/FnewCost.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/FnewCost.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/FnewCost.txt");
				for {p in PHASE, y_stop in PHASE_STOP[p]}{
					printf " %.6f\t", F_new[p,j]*c_inv[y_stop,j]*annualised_factor[p] >> (PathName & "/FnewCost.txt");
					#printf " %.6f\t", F_new[p,j]  >> (PathName & "/FnewCost.txt");
				}
			}
			## Print F_new info to txt file.
			print "--------------SAVING F_new (phase) -----------";
			printf "TECH\t" > (PathName & "/Fnew.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/Fnew.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/Fnew.txt");
				for {p in PHASE, y_stop in PHASE_STOP[p]}{
					#printf " %.6f\t", F_new[p,j]*c_inv[y_stop,j]*annualised_factor[p] >> (PathName & "/Fnew.txt");
					printf " %.6f\t", F_new[p,j]  >> (PathName & "/Fnew.txt");
				}
			}
						## Print F_old info to txt file.
			print "--------------SAVING F_old (phase) -----------";
			printf "TECH\t" > (PathName & "/F_old.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/F_old.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_old.txt");
				for {p in PHASE, y_stop in PHASE_STOP[p]}{
					printf " %.6f\t", F_old[p,j] >> (PathName & "/F_old.txt");
					#printf " %.6f\t", F_old[p,j]  >> (PathName & "/F_old.txt");
				}
			}
			## Print Operating costs info to txt file.
			print "--------------SAVING OPEX YEARLY costs -----------";
			printf "TECH\t" > (PathName & "/OpAndMaint.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/OpAndMaint.txt");
			}
			for {j in TECHNOLOGIES union RESOURCES}{
				printf "\n %s\t",j  >> (PathName & "/OpAndMaint.txt");
				for {y in YEARS}{
					printf " %.6f\t", if j in TECHNOLOGIES then C_maint [y,j] else C_op [y,j] >> (PathName & "/OpAndMaint.txt");
					#printf " %.6f\t", F_new[p,j]  >> (PathName & "/OpAndMaint.txt");
				}
			}
			## Print Operating costs info to txt file.
			print "--------------SAVING CAPEX YEARLY (annualised) -----------";
			printf "TECH\t" > (PathName & "/CAPEX_annualised.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/CAPEX_annualised.txt");
			}
			for {j in TECHNOLOGIES union RESOURCES}{
				printf "\n %s\t",j  >> (PathName & "/CAPEX_annualised.txt");
				for {y in YEARS}{
					printf " %.6f\t", if j in TECHNOLOGIES then tau[y,j] * C_inv[y,j] else 0 >> (PathName & "/CAPEX_annualised.txt");
				}
			}
			## Print Operating costs info to txt file.
			print "--------------SAVING CAPEX TECH PHASE (annualised) -----------";
			printf "TECH\t" > (PathName & "/CAPEX_tech_phase.txt");
			for {p in PHASE}{
				printf "%s\t", p >> (PathName & "/CAPEX_tech_phase.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/CAPEX_tech_phase.txt");
				for {p in PHASE, y_start in PHASE_START[p], y_stop in PHASE_STOP[p]}{
					printf "%.6f\t", F_new[p,j]*annualised_factor[p]*(c_inv[y_start,j]+c_inv[y_stop,j])/2 >> (PathName & "/CAPEX_tech_phase.txt");
				}
			}
			printf "\n Total\t" > (PathName & "/CAPEX_tech_phase.txt");
			for {p in PHASE}{
				printf " %.6f\t", C_inv_phase[p] >> (PathName & "/CAPEX_tech_phase.txt");
			}
			## Print Operating costs info to txt file.
			print "--------------SAVING GWP YEARLY (based on RES) -----------";
			printf "Emissions [ktCO2]\t" > (PathName & "/GWP_YEARLY.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/GWP_YEARLY.txt");
			}
			printf "\n RES based \t"  >> (PathName & "/GWP_YEARLY.txt");
				for {y in YEARS}{
					printf " %.6f\t", sum {i in RESOURCES} GWP_op [y,i] >> (PathName & "/GWP_YEARLY.txt");
			}
			printf "\n ALL \t"  >> (PathName & "/GWP_YEARLY.txt");
				for {y in YEARS}{
					printf " %.6f\t", sum {j in TECHNOLOGIES} (GWP_constr [y,j] / lifetime [y,j]) + sum {i in RESOURCES} GWP_op [y,i] >> (PathName & "/GWP_YEARLY.txt");
			}

			## Print F_decomm info to txt file.
			print "--------------SAVING F_new (phase) -----------";
			printf "TECH\t" > (PathName & "/F_decomm.txt");
			for {p in {{"2010_2020"} union PHASE}}{
				printf "%s\t", p >> (PathName & "/F_decomm.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_decomm.txt");
				for {p in PHASE}{
					for {pbuilt in {{"2010_2020"} union PHASE}}{
						printf " %.6f\t", F_decom[p,pbuilt,j]  >> (PathName & "/F_decomm.txt");
					}
				}
			}
			## Print F_decomm_ALL info to txt file.
			print "--------------SAVING F_decomm_ALL (phase) -----------";
			printf "TECH\t" > (PathName & "/F_decomm_ALL.txt");
			for {p in PHASE}{
				printf "%s\t", p >> (PathName & "/F_decomm_ALL.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_decomm_ALL.txt");
				for {p in PHASE }{

					printf " %.6f\t", sum {p2 in {"2010_2020"} union PHASE} F_decom[p,p2,j]  >> (PathName & "/F_decomm_ALL.txt");
				}
			}

			## Print C_inv_return info to txt file.
			print "--------------SAVING C_inv_return -----------";
			printf "TECH\t" > (PathName & "/C_inv_return.txt");
			for {p in PHASE}{
				printf "%s\t", p >> (PathName & "/C_inv_return.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/C_inv_return.txt");
				for {p in PHASE }{
						printf " %.6f\t", C_inv_return[j,p]  >> (PathName & "/C_inv_return.txt");
				}
			}

			## Print F_years info to txt file.
			print "--------------SAVING F (years) -----------";
			printf "TECH\t" > (PathName & "/F_years.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/F_years.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_years.txt");
				for {y in YEARS }{
					printf " %.6f\t", F [y,j]  >> (PathName & "/F_years.txt");
				}
			}

			## Print F_years_NO_ZERO info to txt file.
			print "--------------SAVING F (years) without 0 -----------";
			printf "TECH\t" > (PathName & "/F_years_NO_ZERO.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/F_years_NO_ZERO.txt");
			}
			for {j in TECHNOLOGIES}{
				if sum {y in YEARS} F[y,j] > 0 then {
						printf "\n %s\t",j  >> (PathName & "/F_years_NO_ZERO.txt");
						for {y in YEARS }{
							printf " %.6f\t", F [y,j]  >> (PathName & "/F_years_NO_ZERO.txt");
						}}
			}


			## Print Ressources over Phase info to txt file.
			print "--------------SAVING Ressources over phase -----------";
			printf "RESOURCES\t" > (PathName & "/RES.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/RES.txt");
			}
			for {i in RESOURCES}{
				printf "\n %s\t",i  >> (PathName & "/RES.txt");
				#printf "%.6f\t",avail ["YEAR_2020",i]   >> (PathName & "/RES.txt");
				for {y in YEARS}{
					printf " %.6f\t",sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,i,h,td] * t_op [h, td])  >> (PathName & "/RES.txt");
				}
			}

			## Print mobility shares over YEARS info to txt file.
			print "--------------SAVING Mob public shares -----------";
			printf "Tech\t" > (PathName & "/Mob_shares.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/Mob_shares.txt");
			}
			for {tech in TECHNOLOGIES_OF_END_USES_TYPE["MOB_PUBLIC"]}{
				printf "\n %s \t", tech >> (PathName & "/Mob_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					F_t [y,tech, h, td] >> (PathName & "/Mob_shares.txt");
			}}
			for {tech in TECHNOLOGIES_OF_END_USES_TYPE["MOB_PRIVATE"]}{
				printf "\n %s \t", tech >> (PathName & "/Mob_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					F_t [y,tech, h, td] >> (PathName & "/Mob_shares.txt");
			}}
			for {euc in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"], tech in TECHNOLOGIES_OF_END_USES_TYPE[euc]}{
				printf "\n %s \t", tech >> (PathName & "/Mob_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					F_t [y,tech, h, td] >> (PathName & "/Mob_shares.txt");
			}}
			##
			print "--------------SAVING Elec shares -----------";
			printf "Tech\t" > (PathName & "/Elec_shares.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/Elec_shares.txt");
			}
			for {tech in TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n %s \t", tech >> (PathName & "/Elec_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					layers_in_out [y,tech,"ELECTRICITY"] * F_t [y,tech, h, td] >> (PathName & "/Elec_shares.txt");
			}}
			##
			print "--------------SAVING HT shares -----------";
			printf "Tech\t" > (PathName & "/HT_shares.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/HT_shares.txt");
			}
			for {tech in TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n %s \t", tech >> (PathName & "/HT_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					layers_in_out [y,tech,"HEAT_HIGH_T"] * F_t [y,tech, h, td] >> (PathName & "/HT_shares.txt");
			}}
			##
			print "--------------SAVING LT_DEC shares -----------";
			printf "Tech\t" > (PathName & "/LTDec_shares.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/LTDec_shares.txt");
			}
			for {tech in TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n %s \t", tech >> (PathName & "/LTDec_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					layers_in_out [y,tech,"HEAT_LOW_T_DHN"] * F_t [y,tech, h, td] >> (PathName & "/LTDec_shares.txt");
			}}
			##
			print "--------------SAVING LT_DHN shares -----------";
			printf "Tech\t" > (PathName & "/LTDHN_shares.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/LTDHN_shares.txt");
			}
			for {tech in TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n %s \t", tech >> (PathName & "/LTDHN_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					layers_in_out [y,tech,"HEAT_LOW_T_DECEN"] * F_t [y,tech, h, td] >> (PathName & "/LTDHN_shares.txt");
			}}
			##
			print "--------------SAVING EnergyStored shares -----------";
			printf "Tech_sto\t" > (PathName & "/E_stored.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/E_stored.txt");
			}
			for {tech in STORAGE_TECH}{
				printf "\n %s \t", tech >> (PathName & "/E_stored.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], l in LAYERS}
					(if ((Storage_in [y,tech,l,h,td] - Storage_out [y,tech,l,h,td])<0) then (Storage_in [y,tech,l,h,td] - Storage_out [y,tech,l,h,td]) else 0) >> (PathName & "/E_stored.txt");
			}}
			##
			print "--------------SAVING synthetic fuels -----------";
			printf "Infrastructure\t" > (PathName & "/Infrastructure.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/Infrastructure.txt");
			}
			for {tech in INFRASTRUCTURE}{
				printf "\n %s \t", tech >> (PathName & "/Infrastructure.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					F_t [y,tech, h, td] >> (PathName & "/Infrastructure.txt");
			}}



			for {y in YEARS}{
			################################################################################
			################################################################################
			##																			  ##
			##                     			SAVING RESULTS								  ##
			##																			  ##
			################################################################################
			################################################################################

			let PathName := "output/"&y;
			print PathName;


			## Saving sets and parameters to output file
			option show_stats 0; # show statistics
			option times 0; # show time
			option gentimes 0; # show time

			## Print cost breakdown to txt file.
			print "--------------SAVING COSTS -----------";
			printf "%s\t%s\t%s\t%s\n", "Name", "C_inv", "C_maint", "C_op" > (PathName & "/cost_breakdown.txt");
			for {i in TECHNOLOGIES union RESOURCES}{
				printf "%s\t%.6f\t%.6f\t%.6f\n", i, if i in TECHNOLOGIES then (tau[y,i] * C_inv[y,i]) else 0, if i in TECHNOLOGIES then C_maint [y,i] else 0, if i in RESOURCES then C_op [y,i] else 0 >> (PathName & "/cost_breakdown.txt");
			}

			## Print resources breakdown to txt file.
			print "--------------SAVING RESOURCES -----------";
			printf "%s\t%s\t%s\n", "Name", "Used", "Potential" > (PathName & "/resources_breakdown.txt");
			for {i in RESOURCES}{
				printf "%s\t%.6f\t%.6f\n", i, sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,i, h, td] * t_op [h, td]) , avail [y,i] >> (PathName & "/resources_breakdown.txt");
			}


			## Print GWP breakdown
			print "--------------SAVING GWP -----------";
			printf "%s\t%s\t%s\n", "Name", "GWP_constr", "GWP_op" > (PathName & "/gwp_breakdown.txt");
			for {i in TECHNOLOGIES union RESOURCES}{
				printf "%s\t%.6f\t%.6f\n", i, if i in TECHNOLOGIES then GWP_constr [y,i] / lifetime [y,i] else 0, if i in RESOURCES then GWP_op [y,i] else 0 >> (PathName & "/gwp_breakdown.txt");
			}

			## Print losses to txt file
			print "--------------SAVING Losses -----------";
			printf "%s\t%s\n", "End use", "Losses" > (PathName & "/losses.txt");
			for {i in END_USES_TYPES}{
					printf "%s\t%.3f\n",i,  sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t] }(Network_losses [y,i,h,td] * t_op [h,td])  >> (PathName & "/losses.txt");
			}

			## Print ASSETS to txt file
			print "--------------SAVING ASSETS -----------";
			printf "TECHNOLOGIES\t c_inv\t c_maint\t lifetime\t  f_min\t f\t f_max\t fmin_perc\t" > (PathName & "/assets.txt");
			printf "f_perc\t fmax_perc\t c_p\t c_p_max\t tau\t gwp_constr" > (PathName & "/assets.txt"); # Must be split in 2 parts, otherwise too long for GLPK
			printf "\n UNITS\t[MCHCapitalf/GW]\t [MCHCapitalf/GW]\t [y]\t [GW or GWh]\t" >> (PathName & "/assets.txt");
			printf " [GW or GWh]\t [GW or GWh]\t [0-1]\t [0-1]\t [0-1]\t [0-1]\t [0-1]\t [-]\t [ktCO2-eq./GW or GWh] " >> (PathName & "/assets.txt");
			for {i in END_USES_TYPES, tech in TECHNOLOGIES_OF_END_USES_TYPE[i]}{
				printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",tech,
			C_inv[y,tech],C_maint[y,tech],lifetime[y,tech],f_min[y,tech],F[y,tech],f_max[y,tech],
			fmin_perc[y,tech],
			sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,tech,h,td] ) / sum {j2 in
			TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} max((F_t [y,j2, h2,
			td2] ),0.0001),fmax_perc[y,tech],
			sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,tech,h,td] * t_op[h,td]) / 8760 / max(F[y,tech],0.0001),
			c_p[y,tech],tau[y,tech],GWP_constr[y,tech] >> (PathName & "/assets.txt");
			}
			for {tech in STORAGE_TECH}{
				printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",tech,
			C_inv[y,tech],C_maint[y,tech],lifetime[y,tech],f_min[y,tech],F[y,tech],f_max[y,tech],
			fmin_perc[y,tech],
			-1,
			fmax_perc[y,tech],
			sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t],l in LAYERS: storage_eff_out [y,tech,l] > 0} -min(0,Storage_out [y,tech, l, h, td] / storage_eff_out [y,tech, l] - Storage_in [y,tech, l, h, td] * storage_eff_in [y,tech, l]) / 8760 / max(F[y,tech],0.0001)
			,c_p[y,tech],tau[y,tech],GWP_constr[y,tech] >> (PathName & "/assets.txt");
			}
			for {tech in INFRASTRUCTURE}{
				printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",tech,
			C_inv[y,tech],C_maint[y,tech],lifetime[y,tech],f_min[y,tech],F[y,tech],f_max[y,tech],
			fmin_perc[y,tech],
			-1,
			fmax_perc[y,tech],
			sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,tech,h,td] * t_op[h,td]) / 8760 / max(F[y,tech],0.0001)
			,c_p[y,tech],tau[y,tech],GWP_constr[y,tech] >> (PathName & "/assets.txt");
			}

			# To save time
			#    STORAGE distribution CURVES
			print "--------------SAVING STORAGE -----------";
			printf "Time\t" > (PathName & "/hourly_data/energy_stored.txt");
			for {i in STORAGE_TECH }{
				printf "%s\t", i >> (PathName & "/hourly_data/energy_stored.txt");
			}
			for {i in STORAGE_TECH }{
				printf "%s_in\t" , i >> (PathName & "/hourly_data/energy_stored.txt");
				printf "%s_out\t", i >> (PathName & "/hourly_data/energy_stored.txt");
			}
			for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
				printf "\n %d\t",t  >> (PathName & "/hourly_data/energy_stored.txt");
				for {i in STORAGE_TECH}{
					if F[y,i]=0 then
						printf "0\t" >> (PathName & "/hourly_data/energy_stored.txt");
					else
						printf "%f\t", Storage_level[y,i, t] >> (PathName & "/hourly_data/energy_stored.txt");
				}
				for {i in STORAGE_TECH}{
					if F[y,i]=0 then
						printf "0\t0\t" >> (PathName & "/hourly_data/energy_stored.txt");
					else {
						printf "%f\t", (sum {l in LAYERS: storage_eff_in [y,i,l] > 0}-(Storage_in [y,i, l, h, td] * storage_eff_in [y,i, l]))	>> (PathName & "/hourly_data/energy_stored.txt");
						printf "%f\t", (sum {l in LAYERS: storage_eff_in [y,i,l] > 0}	(Storage_out [y,i, l, h, td] / storage_eff_out [y,i, l]))	>> (PathName & "/hourly_data/energy_stored.txt");
					}
				}
			}

			# LAYERS FLUXES
			print "--------------SAVING LAYERS -----------";
				for {l in LAYERS}{
				printf "Td \t Time\t" > (PathName & "/hourly_data/layer_" & l &".txt");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf "%s\t",i >> (PathName & "/hourly_data/layer_" & l &".txt");
				}
				for {j in STORAGE_TECH }{
					printf "%s_Pin\t",j >> (PathName & "/hourly_data/layer_" & l &".txt");
					printf "%s_Pout\t",j >> (PathName & "/hourly_data/layer_" & l &".txt");
				}
				printf "END_USE\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
				if l = "ELECTRICITY" then printf "curtailment\t" >> (PathName & "/hourly_data/layer_" & l &".txt");

				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n %d \t %d\t",td,h   >> (PathName & "/hourly_data/layer_" & l &".txt");
					for {i in RESOURCES}{
						if layers_in_out[y, i, l] = 0 then # Incompatible
							printf "0\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
						else
							printf "%f\t",(layers_in_out [y, i, l] * F_t [y,i, h, td]) >> (PathName & "/hourly_data/layer_" & l &".txt");
					}
					for {i in TECHNOLOGIES diff STORAGE_TECH}{
						if layers_in_out [y, i, l] = 0 then # Incompatible
							printf "0\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
						else{
							if F[y,i] = 0 then #No technology installed
								printf "0\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
							else {
								printf "%f\t",(layers_in_out [y, i, l] * F_t [y,i, h, td]) >> (PathName & "/hourly_data/layer_" & l &".txt");
						}}
					}
					for {j in STORAGE_TECH}{
						if storage_eff_in[y,j, l] = 0 then # Incompatible
							printf "0\t 0\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
						else {
							if F[y,j] = 0 then #No storage
								printf "0\t 0\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
							else {
								printf "%f\t",(-Storage_in [y,j, l, h, td]) >> (PathName & "/hourly_data/layer_" & l &".txt");
								printf "%f\t", (Storage_out [y,j, l, h, td])>> (PathName & "/hourly_data/layer_" & l &".txt");
						}}
					}
					printf "%f\t", -End_uses [y,l, h, td]  >> (PathName & "/hourly_data/layer_" & l &".txt");
					if l = "ELECTRICITY" then printf "%f\t", sum {tech in {"PV","WIND_ONSHORE","WIND_OFFSHORE","HYDRO_RIVER"}}
															(F[y,tech]*c_p_t[tech,h,td] - F_t[y,tech,h,td])>> (PathName & "/hourly_data/layer_" & l &".txt");
				}
			}



			## Energy yearly balance
			printf "Tech\t" > (PathName & "/year_balance.txt");
			for {l in LAYERS}{
				printf "%s\t",l >> (PathName & "/year_balance.txt");
			}
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n %s \t", i >> (PathName & "/year_balance.txt");
				for {l in LAYERS}{
					printf " %f\t", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			layers_in_out [y, i, l] * F_t [y,i, h, td] >> (PathName & "/year_balance.txt");
				}
			}
			for {j in STORAGE_TECH}{
				printf "\n %s \t", j >> (PathName & "/year_balance.txt");
				for {l in LAYERS}{
					printf " %f\t", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			(Storage_out [y,j, l, h, td] - Storage_in [y,j, l, h, td]) >> (PathName & "/year_balance.txt");
				}
			}
			printf "\n END_USES_DEMAND \t" >> (PathName & "/year_balance.txt");
			for {l in LAYERS}{
				printf " %f\t", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					End_uses [y,l, h, td] >> (PathName & "/year_balance.txt");
			}


			# LAYERS FLUXES hourly
			print "--------------SAVING LAYERS HOURLY -----------";
				for {l in {"ELECTRICITY","NG"}}{ # à mettre l in {"ELECTRICITY","NG"} parce que c'est les deux seuls qui m'intéresse
				printf "time\t" > (PathName & "/hourly_data/hourly_layer_" & l &".txt");
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf "%s\t",i >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
				}
				for {j in STORAGE_TECH }{
					printf "%s_Pin\t",j >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
					printf "%s_Pout\t",j >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
				}
				printf "END_USE\t" >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");

				for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
					printf "\n %d \t",t   >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
					for {i in RESOURCES}{
						if layers_in_out[y, i, l] = 0 then # Incompatible
							printf "0\t" >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
						else
							printf "%f\t",(layers_in_out [y, i, l] * F_t [y,i, h, td]) >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
					}
					for {i in TECHNOLOGIES diff STORAGE_TECH}{
						if layers_in_out [y, i, l] = 0 then # Incompatible
							printf "0\t" >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
						else{
							if F[y,i] = 0 then #No technology installed
								printf "0\t" >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
							else {
								printf "%f\t",(layers_in_out [y, i, l] * F_t [y,i, h, td]) >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
						}}
					}
					for {j in STORAGE_TECH}{
						if storage_eff_in[y,j, l] = 0 then # Incompatible
							printf "0\t 0\t" >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
						else {
							if F[y,j] = 0 then #No storage
								printf "0\t 0\t" >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
							else {
								printf "%f\t",(-Storage_in [y,j, l, h, td]) >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
								printf "%f\t", (Storage_out [y,j, l, h, td])>> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
						}}
					}
					printf "%f\t", -End_uses [y,l, h, td]  >> (PathName & "/hourly_data/hourly_layer_" & l &".txt");
				}
			}



			################################################################################
			################################################################################
			##																			  ##
			##                     			    SANKEY 	     							  ##
			##																			  ##
			################################################################################
			################################################################################


			print "--------- SAVING SANKEY --------";

			## Generate CSV file to be used as input to Sankey diagram
			# Notes:
			# - Assuming that SNG and BioOil are used in boilers
			printf "%s,%s,%s,%s,%s,%s\n", "source" , "target", "realValue", "layerID", "layerColor", "layerUnit" > (PathName & "/input2sankey.csv");

			#------------------------------------------
			# SANKEY - RESOURCES
			#------------------------------------------
			## Gasoline
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,"GASOLINE", h, td]  ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Imp. Gasoline" , "Gasoline", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
										(layers_in_out[y,"GASOLINE","GASOLINE"] * F_t [y,"GASOLINE", h, td]  ) / 1000 , "Gasoline",
				"#808080", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gasoline", "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
										(layers_in_out[y,"CAR_GASOLINE","GASOLINE"] * F_t [y,"CAR_GASOLINE", h, td]  + layers_in_out[y,"CAR_HEV","GASOLINE"] * F_t [y,"CAR_HEV", h, td]   + layers_in_out[y,"CAR_PHEV","GASOLINE"] * F_t [y,"CAR_PHEV", h, td]  ) / 1000 , "Gasoline",
				"#808080", "TWh" > (PathName & "/input2sankey.csv");
				}
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,"BIOETHANOL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Imp. Bio-ethanol" , "Gasoline", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
										(layers_in_out[y,"BIOETHANOL","GASOLINE"] * F_t [y,"BIOETHANOL", h, td]  ) / 1000 , "Gasoline",
				"#808080", "TWh" > (PathName & "/input2sankey.csv");

			## Diesel
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"DIESEL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Imp. Diesel" , "Diesel", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"DIESEL","DIESEL"] * F_t [y,"DIESEL", h, td]  ) / 1000 , "Diesel",
					"#D3D3D3", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"BIODIESEL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Imp. Bio-diesel" , "Diesel", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"BIODIESEL","DIESEL"] * F_t [y,"BIODIESEL", h, td]  ) / 1000 , "Diesel",
					"#D3D3D3", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"CAR_DIESEL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"CAR_DIESEL","DIESEL"] * F_t [y,"CAR_DIESEL", h, td]  ) / 1000 , "Diesel",
					"#D3D3D3", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [y,"BUS_COACH_DIESEL", h, td] +
			F_t [y,"BUS_COACH_HYDIESEL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"BUS_COACH_DIESEL","DIESEL"] * F_t [y,"BUS_COACH_DIESEL", h, td]   -
					layers_in_out[y,"BUS_COACH_HYDIESEL","DIESEL"] * F_t [y,"BUS_COACH_HYDIESEL", h, td]   ) / 1000 , "Diesel", "#D3D3D3", "TWh"
					> (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [y,"TRUCK_DIESEL", h, td] + F_t [y,"BOAT_FREIGHT_DIESEL", h, td] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"TRUCK_DIESEL","DIESEL"] * F_t [y,"TRUCK_DIESEL", h, td]  -layers_in_out[y,"BOAT_FREIGHT_DIESEL","DIESEL"] * F_t [y,"BOAT_FREIGHT_DIESEL", h, td]  ) / 1000 , "Diesel", "#D3D3D3", "TWh"
					> (PathName & "/input2sankey.csv");

			## Gas (natural & synthetic)
			if sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,"NG", h, td] * t_op [h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Imp. NG" , "Gas", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"NG", h, td] * t_op [h, td]) / 1000 , "Gas", "#FFD700", "TWh" >
					(PathName & "/input2sankey.csv");

			if sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,"SNG", h, td] * t_op [h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Imp. SNG" , "Gas", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"SNG", h, td] * t_op [h, td]) / 1000 , "Gas", "#FFD700", "TWh" >
					(PathName & "/input2sankey.csv");
					# SNG use:
			 # Storage?
			if F [y,"SEASONAL_NG"] > 0.001 then {
					printf "%s,%s,%.2f,%s,%s,%s\n", "Gas Prod" , "SNG sto.", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [y,"SEASONAL_NG", "NG", h, td]  ) / 1000 ,
					"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
					printf "%s,%s,%.2f,%s,%s,%s\n", "SNG sto." , "Gas", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(Storage_out [y,"SEASONAL_NG", "NG", h, td]*storage_eff_out [y,"SEASONAL_NG","NG"]  ) / 1000 ,
					"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
					printf "%s,%s,%.2f,%s,%s,%s\n", "Gas Prod" , "Gas", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out[y,"GASIFICATION_SNG","NG"] * F_t [y,"GASIFICATION_SNG", h, td] + layers_in_out[y,"BIOMETHANATION","NG"] * F_t [y,"BIOMETHANATION", h, td] + layers_in_out[y,"BIO_HYDROLYSIS","NG"] * F_t [y,"BIO_HYDROLYSIS", h, td] + layers_in_out[y,"SYN_METHANATION","NG"] * F_t [y,"SYN_METHANATION", h, td]
											  - Storage_in [y,"SEASONAL_NG", "NG", h, td] ) / 1000 ,
					"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");

			}
			if F [y,"SEASONAL_NG"] <= 0.001 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas Prod" , "Gas", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out[y,"GASIFICATION_SNG","NG"] * F_t [y,"GASIFICATION_SNG", h, td] + layers_in_out[y,"BIOMETHANATION","NG"] * F_t [y,"BIOMETHANATION", h, td] + layers_in_out[y,"BIO_HYDROLYSIS","NG"] * F_t [y,"BIO_HYDROLYSIS", h, td] + layers_in_out[y,"SYN_METHANATION","NG"] * F_t [y,"SYN_METHANATION", h, td]
											  - Storage_in [y,"SEASONAL_NG", "NG", h, td] ) / 1000 ,
					"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"CAR_NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"CAR_NG","NG"] * F_t [y,"CAR_NG", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"BUS_COACH_CNG_STOICH", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"BUS_COACH_CNG_STOICH","NG"] * F_t [y,"BUS_COACH_CNG_STOICH", h, td]  ) / 1000 ,
					"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"BOAT_FREIGHT_NG", h, td] + F_t [y,"TRUCK_NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"BOAT_FREIGHT_NG","NG"] * F_t [y,"BOAT_FREIGHT_NG", h, td] -layers_in_out[y,"TRUCK_NG","NG"] * F_t [y,"TRUCK_NG", h, td]  ) / 1000 ,
					"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"H2_NG", h, td]  ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "H2 prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"H2_NG","NG"] * F_t [y,"H2_NG", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" >
					(PathName & "/input2sankey.csv");
			}
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"CCGT", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"CCGT","NG"] * F_t [y,"CCGT", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"IND_COGEN_GAS", h, td] + F_t [y,"DHN_COGEN_GAS", h,
				td] + F_t [y,"DEC_COGEN_GAS", h, td] + F_t [y,"DEC_ADVCOGEN_GAS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"IND_COGEN_GAS","NG"] * F_t [y,"IND_COGEN_GAS", h, td]   -
					layers_in_out[y,"DHN_COGEN_GAS","NG"] * F_t [y,"DHN_COGEN_GAS", h, td]   - layers_in_out[y,"DEC_COGEN_GAS","NG"] * F_t
					[y,"DEC_COGEN_GAS", h, td]   - layers_in_out[y,"DEC_ADVCOGEN_GAS","NG"] * F_t [y,"DEC_ADVCOGEN_GAS", h, td]  ) /
					1000 , "NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"DEC_THHP_GAS", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"DEC_THHP_GAS","NG"] * F_t [y,"DEC_THHP_GAS", h, td]  ) / 1000 , "NG", "#FFD700",
					"TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"IND_BOILER_GAS", h, td] + F_t [y,"DHN_BOILER_GAS", h, td] + F_t [y,"DEC_BOILER_GAS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"IND_BOILER_GAS","NG"] * F_t [y,"IND_BOILER_GAS", h, td]   -
					layers_in_out[y,"DHN_BOILER_GAS","NG"] * F_t [y,"DHN_BOILER_GAS", h, td]   - layers_in_out[y,"DEC_BOILER_GAS","NG"] * F_t
					[y,"DEC_BOILER_GAS", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"METHANE_TO_METHANOL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Biofuels Prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"METHANE_TO_METHANOL","NG"] * F_t [y,"METHANE_TO_METHANOL", h, td]  ) / 1000 , "NG", "#FFD700", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"NON_ENERGY_NG", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Non-Energy", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					F_t [y,"NON_ENERGY_NG", h, td] /1000, "NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");

			## Electricity production
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Electricity" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"ELECTRICITY","ELECTRICITY"] * F_t [y,"ELECTRICITY", h, td]  ) / 1000 ,
					"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"NUCLEAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Uranium" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}( - layers_in_out[y,"NUCLEAR","URANIUM"] * F_t [y,"NUCLEAR", h, td]  ) / 1000 , "Nuclear",
					"#FFC0CB", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"WIND_ONSHORE", h, td] + F_t [y,"WIND_OFFSHORE", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wind" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"WIND_ONSHORE","ELECTRICITY"] * F_t [y,"WIND_ONSHORE", h, td] + layers_in_out[y,"WIND_OFFSHORE","ELECTRICITY"] * F_t [y,"WIND_OFFSHORE", h, td]  ) / 1000 , "Wind", "#27AE34", "TWh"
					> (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"HYDRO_RIVER", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Hydro River" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"HYDRO_RIVER","ELECTRICITY"] * F_t [y,"HYDRO_RIVER", h, td]   ) / 1000 , "Hydro River", "#0000FF",
					"TWh" > (PathName & "/input2sankey.csv");

			# Coal
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"COAL_US", h, td] + F_t [y,"COAL_IGCC", h, td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Coal" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"COAL_US","COAL"] * F_t [y,"COAL_US", h, td]   - layers_in_out[y,"COAL_IGCC","COAL"]
					* F_t [y,"COAL_IGCC", h, td]  ) / 1000 , "Coal", "#A0522D", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"IND_BOILER_COAL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Coal" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"IND_BOILER_COAL","COAL"] * F_t [y,"IND_BOILER_COAL", h, td]  ) / 1000 , "Coal",
					"#A0522D", "TWh" > (PathName & "/input2sankey.csv");

			# Solar
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"PV", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"PV","ELECTRICITY"] * F [y,"PV"] * c_p_t["PV",h,td]  ) / 1000 , "Solar", "#FFFF00", "TWh" > #From F_t -> F <=> taking into account curtailment
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"DEC_SOLAR", h, td]  ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Dec. sto", sum{i in TECHNOLOGIES_OF_END_USES_TYPE["HEAT_LOW_T_DECEN"] diff {"DEC_SOLAR"},j in TS_OF_DEC_TECH[i], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					                                                            (layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t_solar [y,i,h,td]/max((layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td]) + layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t_solar [y,i,h,td],0.0001)
																				* max(Storage_in [y,j , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,j , "HEAT_LOW_T_DECEN", h, td],0 ))/1000,
					 "Solar", "#FFFF00", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Heat LT Dec", sum{i in TECHNOLOGIES_OF_END_USES_TYPE["HEAT_LOW_T_DECEN"] diff {"DEC_SOLAR"},j in TS_OF_DEC_TECH[i], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t_solar [y,i,h,td] - (layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t_solar [y,i,h,td]/max((layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td])  + layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t_solar [y,i,h,td],0.0001)
																				* max(Storage_in [y,j , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,j , "HEAT_LOW_T_DECEN", h, td],0 )))/1000,
					 "Solar", "#FFFF00", "TWh" > (PathName & "/input2sankey.csv");
					}
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"DHN_SOLAR", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"DHN_SOLAR","HEAT_LOW_T_DHN"] * F [y,"DHN_SOLAR"] * c_p_t["DHN_SOLAR",h,td]  ) / 1000 , "Solar", "#FFFF00", "TWh" > #From F_t -> F <=> taking into account curtailment
					(PathName & "/input2sankey.csv");

			# Geothermal
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"GEOTHERMAL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Geothermal" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"GEOTHERMAL","ELECTRICITY"] * F_t [y,"GEOTHERMAL", h, td]  ) / 1000 , "Geothermal",
			"#FF0000", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"DHN_DEEP_GEO", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Geothermal" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
			TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"DHN_DEEP_GEO","HEAT_LOW_T_DHN"] * F_t [y,"DHN_DEEP_GEO", h, td]  ) / 1000 ,
			"Geothermal", "#FF0000", "TWh" > (PathName & "/input2sankey.csv");

			# Waste
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"IND_COGEN_WASTE", h, td] + F_t
			[y,"DHN_COGEN_WASTE", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"IND_COGEN_WASTE","WASTE"] * F_t [y,"IND_COGEN_WASTE", h, td]
					-layers_in_out[y,"DHN_COGEN_WASTE","WASTE"] * F_t [y,"DHN_COGEN_WASTE", h, td]  ) / 1000 , "Waste", "#808000", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"IND_BOILER_WASTE", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"IND_BOILER_WASTE","WASTE"] * F_t [y,"IND_BOILER_WASTE", h, td]  ) / 1000 ,
					"Waste", "#808000", "TWh" > (PathName & "/input2sankey.csv");

			# Oil
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"LFO", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Imp. Oil" , "Oil", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(-layers_in_out[y,"LFO","LFO"] * F_t [y,"LFO", h, td]  ) / 1000 , "Oil",
					"#8B008B", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"DEC_COGEN_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"DEC_COGEN_OIL","LFO"] * F_t [y,"DEC_COGEN_OIL", h, td]  ) / 1000 , "Oil",
					"#8B008B", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"IND_BOILER_OIL", h, td] + F_t [y,"DHN_BOILER_OIL",
			h, td] + F_t [y,"DEC_BOILER_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"IND_BOILER_OIL","LFO"] * F_t [y,"IND_BOILER_OIL", h, td]   -
					layers_in_out[y,"DHN_BOILER_OIL","LFO"] * F_t [y,"DHN_BOILER_OIL", h, td]   - layers_in_out[y,"DEC_BOILER_OIL","LFO"] *
					F_t [y,"DEC_BOILER_OIL", h, td]  ) / 1000 , "Oil", "#8B008B", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"NON_ENERGY_OIL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "Non-Energy", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					F_t [y,"NON_ENERGY_OIL", h, td] /1000 , "Oil","#8B008B", "TWh" > (PathName & "/input2sankey.csv");

			# Biofuels
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"SLF", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Imp. SLF" , "Biofuels", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(layers_in_out[y,"SLF","SLF"] * F_t [y,"SLF", h, td]  ) / 1000 , "Oil",
					"#8B008B", "TWh" > 	(PathName & "/input2sankey.csv");

			# Wood
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"H2_BIOMASS", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "H2 prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"H2_BIOMASS","WOOD"] * F_t [y,"H2_BIOMASS", h, td]  ) / 1000 , "Wood", "#CD853F",
					"TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"PYROLYSIS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Biofuels Prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}( - layers_in_out[y,"PYROLYSIS","WOOD"] * F_t [y,"PYROLYSIS", h, td]  ) / 1000 , "Wood", "#CD853F", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"IND_COGEN_WOOD", h, td] + F_t [y,"DHN_COGEN_WOOD",
			h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"IND_COGEN_WOOD","WOOD"] * F_t [y,"IND_COGEN_WOOD", h, td]   -
					layers_in_out[y,"DHN_COGEN_WOOD","WOOD"] * F_t [y,"DHN_COGEN_WOOD", h, td]  ) / 1000 , "Wood", "#CD853F", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"IND_BOILER_WOOD", h, td] + F_t
			[y,"DHN_BOILER_WOOD", h, td] + F_t [y,"DEC_BOILER_WOOD", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Boilers", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"IND_BOILER_WOOD","WOOD"] * F_t [y,"IND_BOILER_WOOD", h, td]   -
					layers_in_out[y,"DHN_BOILER_WOOD","WOOD"] * F_t [y,"DHN_BOILER_WOOD", h, td]   - layers_in_out[y,"DEC_BOILER_WOOD","WOOD"] *
					F_t [y,"DEC_BOILER_WOOD", h, td]  ) / 1000 , "Wood", "#CD853F", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"GASIFICATION_SNG", h, td] )  ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Gasifi.", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"GASIFICATION_SNG","WOOD"]           * F_t [y,"GASIFICATION_SNG", h, td] ) / 1000 , "Wood", "#CD853F", "TWh" >(PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gasifi." , "Gas Prod" , sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out[y,"GASIFICATION_SNG","NG"]        * F_t [y,"GASIFICATION_SNG", h, td] ) / 1000 , "NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gasifi." , "DHN" , sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out[y,"GASIFICATION_SNG","HEAT_LOW_T_DHN"] * F_t [y,"GASIFICATION_SNG", h, td] ) / 1000 , "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gasifi." , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out[y,"GASIFICATION_SNG","ELECTRICITY"]    * F_t [y,"GASIFICATION_SNG", h, td] ) / 1000 , "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			}

			# WET Biomass
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"DHN_COGEN_WET_BIOMASS", h, td] + F_t [y,"DHN_COGEN_BIO_HYDROLYSIS", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wet biomass" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"DHN_COGEN_WET_BIOMASS","WET_BIOMASS"] * F_t [y,"DHN_COGEN_WET_BIOMASS", h, td] -layers_in_out[y,"DHN_COGEN_BIO_HYDROLYSIS","WET_BIOMASS"] * F_t [y,"DHN_COGEN_BIO_HYDROLYSIS", h, td] ) / 1000
					, "Wood", "#CD853F", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"BIOMETHANATION", h, td] + F_t [y,"BIO_HYDROLYSIS", h, td] ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wet biomass" , "Biomethanation", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(- layers_in_out[y,"BIOMETHANATION","WET_BIOMASS"] * F_t [y,"BIOMETHANATION", h, td] - layers_in_out[y,"BIO_HYDROLYSIS","WET_BIOMASS"] * F_t [y,"BIO_HYDROLYSIS", h, td] ) / 1000
					, "Wood", "#CD853F", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biomethanation" , "Gas Prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(  layers_in_out[y,"BIOMETHANATION","NG"]          * F_t [y,"BIOMETHANATION", h, td] + layers_in_out[y,"BIO_HYDROLYSIS","NG"]          * F_t [y,"BIO_HYDROLYSIS", h, td] ) / 1000 ,
					"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			}
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"BIO_HYDROLYSIS", h, td] ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biomethanation" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"BIO_HYDROLYSIS","ELECTRICITY"] * F_t [y,"BIO_HYDROLYSIS", h, td] ) / 1000
					, "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");

			#------------------------------------------
			# SANKEY - Electricity use
			#------------------------------------------
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"CAR_PHEV", h, td] + F_t [y,"CAR_BEV", h, td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"CAR_PHEV","ELECTRICITY"] * F_t [y,"CAR_PHEV", h, td]   -
					layers_in_out[y,"CAR_BEV","ELECTRICITY"] * F_t [y,"CAR_BEV", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"TRAIN_PUB", h, td] + F_t [y,"TRAMWAY_TROLLEY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"TRAIN_PUB","ELECTRICITY"] * F_t [y,"TRAIN_PUB", h, td]   -
					layers_in_out[y,"TRAMWAY_TROLLEY","ELECTRICITY"] * F_t [y,"TRAMWAY_TROLLEY", h, td]  ) / 1000 , "Electricity", "#00BFFF",
					"TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"TRAIN_FREIGHT", h, td] + F_t [y,"TRUCK_ELEC", h, td])  > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"TRAIN_FREIGHT","ELECTRICITY"] * F_t [y,"TRAIN_FREIGHT", h, td] -layers_in_out[y,"TRUCK_ELEC","ELECTRICITY"] * F_t [y,"TRUCK_ELEC", h, td]  ) / 1000 ,
					"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses [y,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Exp & Loss", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses
					[y,"ELECTRICITY", h, td]     ) / 1000
					, "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"ELEC_EXPORT", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Curt.", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(-layers_in_out[y,"ELEC_EXPORT","ELECTRICITY"] * F_t [y,"ELEC_EXPORT", h, td]     ) / 1000
					, "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [y,"ELECTRICITY", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Elec demand", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses
					[y,"ELECTRICITY", h, td]  - Network_losses [y,"ELECTRICITY", h, td] - sum {i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"]} (max(Storage_out [y,i, "ELECTRICITY", h, td] - Storage_in [y,i, "ELECTRICITY", h, td],0))
					)/ 1000 , "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			#In case of curtailment ( F_t < F * c_p_t) solar & wind
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F [y,"PV"] * c_p_t["PV",h,td] -  F_t [y,"PV",h,td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Curt.", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(F[y,"PV"]*c_p_t["PV",h,td] -  F_t [y,"PV",h,td])  / 1000
					, "Solar", "#FFFF00", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F [y,"WIND_ONSHORE"]*c_p_t["WIND_ONSHORE",h,td] -  F_t [y,"WIND_ONSHORE",h,td] + F [y,"WIND_OFFSHORE"]*c_p_t["WIND_OFFSHORE",h,td] -  F_t [y,"WIND_OFFSHORE",h,td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wind" , "Curt.", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(F [y,"WIND_ONSHORE"]*c_p_t["WIND_ONSHORE",h,td] -  F_t [y,"WIND_ONSHORE",h,td] + F [y,"WIND_OFFSHORE"]*c_p_t["WIND_OFFSHORE",h,td] -  F_t [y,"WIND_OFFSHORE",h,td])  / 1000
					, "Wind", "#27AE34", "TWh"  > (PathName & "/input2sankey.csv");
			# New boxes for Electricity storage
			if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [y,i, "ELECTRICITY", h, td]) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Storage", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}       (sum {i
					in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] } max(- Storage_out [y,i, "ELECTRICITY", h, td] + Storage_in [y,i, "ELECTRICITY", h, td] ,0))/ 1000 , "Electricity", "#00BFFF",
					"TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Storage" , "Elec demand", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(sum {i
					in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] } max(+ Storage_out [y,i, "ELECTRICITY", h, td] - Storage_in [y,i, "ELECTRICITY", h, td] ,0))/ 1000 , "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			}
			# Electrification of heat
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"DHN_HP_ELEC", h, td] + F_t [y,"DEC_HP_ELEC", h, td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "HPs", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(-layers_in_out[y,"DHN_HP_ELEC","ELECTRICITY"] * F_t [y,"DHN_HP_ELEC", h, td]
					 -layers_in_out[y,"DEC_HP_ELEC","ELECTRICITY"] * F_t [y,"DEC_HP_ELEC", h, td]  )
					 / 1000 , "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"DEC_DIRECT_ELEC", h, td]  ) > 10 then {
				if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} max(Storage_in [y,"DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,"DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0 ) > 10 then {
					printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Dec. sto", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
																											((layers_in_out[y,"DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t [y,"DEC_DIRECT_ELEC",h,td]/max((layers_in_out[y,"DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t [y,"DEC_DIRECT_ELEC",h,td]) + layers_in_out[y,"DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t_solar [y,"DEC_DIRECT_ELEC",h,td],0.0001)
																											* max(Storage_in [y,"DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,"DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0 )))/1000,
					"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
				}
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Heat LT Dec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					((layers_in_out[y,"DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t [y,"DEC_DIRECT_ELEC",h,td]) - (layers_in_out[y,"DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t [y,"DEC_DIRECT_ELEC",h,td]/max((layers_in_out[y,"DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t [y,"DEC_DIRECT_ELEC",h,td]) + layers_in_out[y,"DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] * F_t_solar [y,"DEC_DIRECT_ELEC",h,td],0.0001)
																										* max(Storage_in [y,"DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,"DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", h, td],0 )))/1000,
					  "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			}
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"IND_DIRECT_ELEC", h, td]  ) > 10 then {
				if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} max(Storage_in [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T", h, td] - Storage_out [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T", h, td],0 ) > 10 then {
					printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "HT sto", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
																											max(storage_eff_in [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T"] * Storage_in [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T", h, td] - Storage_out [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T", h, td],0 )/1000,
						   "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
					printf "%s,%s,%.2f,%s,%s,%s\n", "HT sto", "Heat HT", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
																											max(storage_eff_out [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T"] * Storage_out [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T", h, td] - Storage_in [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T", h, td],0 )/1000,
						   "Heat HT", "#DC143C", "TWh", "TWh" > (PathName & "/input2sankey.csv");
				}
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Heat HT", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
									                                     (F_t [y,"IND_DIRECT_ELEC", h, td]	  - max(storage_eff_in [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T"] * Storage_in [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T", h, td] - Storage_out [y,"TS_HIGH_TEMP" , "HEAT_HIGH_T", h, td],0 ))/1000,
					   "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			}
			# Electrolysis
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"H2_ELECTROLYSIS", h, td]  ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Electrolyser", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"H2_ELECTROLYSIS","ELECTRICITY"] * F_t [y,"H2_ELECTROLYSIS", h, td]  ) / 1000 ,
					"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "HT ?" , "Electrolyser", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(- layers_in_out[y,"H2_ELECTROLYSIS","HEAT_HIGH_T"] * F_t [y,"H2_ELECTROLYSIS", h, td]  ) / 1000 ,
					"Heat HT", "#DC143C", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Electrolyser" , "H2 prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"H2_ELECTROLYSIS","H2"] * F_t [y,"H2_ELECTROLYSIS", h, td]  ) / 1000 ,
					"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Electrolyser" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"H2_ELECTROLYSIS","HEAT_LOW_T_DHN"] * F_t [y,"H2_ELECTROLYSIS", h, td]  ) / 1000 ,
					"Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			}

			#------------------------------------------
			# Synthetic fuels use
			#------------------------------------------
			## H2 use
			if sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [y,"H2", h, td] * t_op [h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Imp. H2" , "H2", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"H2", h, td] * t_op [h, td]) / 1000 , "H2", "#FF00FF", "TWh" >
					(PathName & "/input2sankey.csv");
			if F [y,"SEASONAL_H2"] > 0.001 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2 prod" , "H2 sto.", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(Storage_in [y,"SEASONAL_H2", "H2", h, td]  ) / 1000 ,
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2 sto." , "H2", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(Storage_out [y,"SEASONAL_H2", "H2", h, td]*storage_eff_out [y,"SEASONAL_H2","H2"]  ) / 1000 ,
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2 prod" , "H2", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out[y,"H2_NG","H2"] * F_t [y,"H2_NG", h, td] + layers_in_out[y,"H2_BIOMASS","H2"] * F_t [y,"H2_BIOMASS", h, td] + layers_in_out[y,"H2_ELECTROLYSIS","H2"] * F_t [y,"H2_ELECTROLYSIS", h, td]
												- Storage_in [y,"SEASONAL_H2", "H2", h, td]) / 1000 ,
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
				}
			else{if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}( F_t [y,"H2_NG", h, td] + F_t [y,"H2_BIOMASS", h, td] + F_t [y,"H2_ELECTROLYSIS", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2 prod" , "H2", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out[y,"H2_NG","H2"] * F_t [y,"H2_NG", h, td] + layers_in_out[y,"H2_BIOMASS","H2"] * F_t [y,"H2_BIOMASS", h, td] + layers_in_out[y,"H2_ELECTROLYSIS","H2"] * F_t [y,"H2_ELECTROLYSIS", h, td]) / 1000 ,
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			}
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"DEC_ADVCOGEN_H2", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "CHP", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"DEC_ADVCOGEN_H2","H2"] * F_t [y,"DEC_ADVCOGEN_H2", h, td]  ) / 1000 , "H2",
					"#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"CAR_FUEL_CELL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Mob priv", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"CAR_FUEL_CELL","H2"] * F_t [y,"CAR_FUEL_CELL", h, td]  ) / 1000 , "H2",
					"#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"BUS_COACH_FC_HYBRIDH2", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Mob public", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"BUS_COACH_FC_HYBRIDH2","H2"] * F_t [y,"BUS_COACH_FC_HYBRIDH2", h, td]  ) / 1000 ,
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"TRUCK_FUEL_CELL", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Freight", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"TRUCK_FUEL_CELL","H2"] * F_t [y,"TRUCK_FUEL_CELL", h, td]  ) / 1000 ,
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"SYN_METHANATION", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Gas Prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"SYN_METHANATION","H2"] * F_t [y,"SYN_METHANATION", h, td]  ) / 1000 ,
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"SYN_METHANOLATION", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Biofuels Prod", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(-layers_in_out[y,"SYN_METHANOLATION","H2"] * F_t [y,"SYN_METHANOLATION", h, td]  ) / 1000 ,
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");

			#------------------------------------------
			# SANKEY - HEATING
			#------------------------------------------
			# CHP
			if sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y, i, h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Elec", sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,i,"ELECTRICITY"] * F_t [y,i, h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"DEC_COGEN_GAS", h, td] + F_t [y,"DEC_COGEN_OIL", h,td] + F_t [y,"DEC_ADVCOGEN_GAS", h, td] + F_t [y,"DEC_ADVCOGEN_H2", h, td])  ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Dec. sto", sum{i in {"DEC_COGEN_GAS","DEC_COGEN_OIL","DEC_ADVCOGEN_GAS","DEC_ADVCOGEN_H2"}, j in TS_OF_DEC_TECH[i],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
																				(layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td]/max((layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td]) + layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t_solar [y,i,h,td],0.0001)
																										* max(Storage_in [y,j, "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,j, "HEAT_LOW_T_DECEN", h, td],0 ))/1000,
					 "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Heat LT Dec", sum{i in {"DEC_COGEN_GAS","DEC_COGEN_OIL","DEC_ADVCOGEN_GAS","DEC_ADVCOGEN_H2"},j in TS_OF_DEC_TECH[i],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
						(layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td] - (layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td]/max((layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td]) + layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t_solar [y,i,h,td],0.0001)
																										* max(Storage_in [y,j , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,j, "HEAT_LOW_T_DECEN", h, td],0 ))) /1000,
					 "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			}
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"DHN_COGEN_GAS", h, td] + F_t [y,"DHN_COGEN_WOOD",
			h, td] + F_t [y,"DHN_COGEN_WASTE", h, td]) + F_t [y,"DHN_COGEN_WET_BIOMASS", h, td] + F_t [y,"DHN_COGEN_BIO_HYDROLYSIS", h, td])   > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "DHN", sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,i,"HEAT_LOW_T_DHN"] * F_t [y,i, h, td]  ) / 1000 , "Heat LT", "#FA8072", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"IND_COGEN_GAS", h, td] + F_t [y,"IND_COGEN_WOOD",
			h, td] + F_t [y,"IND_COGEN_WASTE", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Heat HT", sum{i in COGEN, t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,i,"HEAT_HIGH_T"] * F_t [y,i, h, td]  ) / 1000 , "Heat HT", "#DC143C", "TWh" >
					(PathName & "/input2sankey.csv");

			# HPs
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} ((F_t [y,"DEC_HP_ELEC", h, td] + F_t [y,"DEC_THHP_GAS", h, td])  ) > 10 then {
				if sum{i in {"DEC_HP_ELEC","DEC_THHP_GAS"}, j in TS_OF_DEC_TECH[i], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (max(Storage_in [y,j , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,j , "HEAT_LOW_T_DECEN", h, td],0 )) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "Dec. sto", sum{i in {"DEC_HP_ELEC","DEC_THHP_GAS"}, j in TS_OF_DEC_TECH[i], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
																				(layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td]/max((layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td]) + layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t_solar [y,i,h,td],0.0001)
																										* max(Storage_in [y,j , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,j , "HEAT_LOW_T_DECEN", h, td],0 ))/1000,
					 "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
				}
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "Heat LT Dec", sum{i in {"DEC_HP_ELEC","DEC_THHP_GAS"}, j in TS_OF_DEC_TECH[i], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
						(layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td] - (layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td]/max((layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td]) + layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t_solar [y,i,h,td],0.0001)
																										* max(Storage_in [y,j , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,j , "HEAT_LOW_T_DECEN", h, td],0 )))/1000,
					 "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			}
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} F_t [y,"DHN_HP_ELEC", h, td]  > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(layers_in_out[y,"DHN_HP_ELEC","HEAT_LOW_T_DHN"] * F_t [y,"DHN_HP_ELEC",h,td])/1000,
					 "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");

			# Biofuels
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"PYROLYSIS", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels Prod" , "Elec", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"PYROLYSIS","ELECTRICITY"] * F_t [y,"PYROLYSIS", h, td]  ) / 1000 , "Electricity", "#00BFFF", "TWh" >
					(PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(F_t [y,"SYN_METHANOLATION", h, td] + F_t [y,"SYN_METHANATION", h, td]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels Prod" , "DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(layers_in_out[y,"SYN_METHANOLATION","HEAT_LOW_T_DHN"] * F_t [y,"SYN_METHANOLATION", h, td] + layers_in_out[y,"SYN_METHANATION","HEAT_LOW_T_DHN"] * F_t [y,"SYN_METHANATION", h, td]  ) / 1000 ,
					"Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");

			if F [y,"SLF_STO"] > 0.001 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels Prod" , "Biofuels sto.", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(max(Storage_in [y,"SLF_STO", "SLF", h, td] - Storage_out [y,"SLF_STO", "SLF", h, td],0)  ) / 1000 ,
					"Oil", "#8B008B", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels sto." , "Biofuels", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(max(Storage_out [y,"SLF_STO", "SLF", h, td] - Storage_in [y,"SLF_STO", "SLF", h, td],0)*storage_eff_out [y,"SLF_STO","SLF"]  ) / 1000 ,
					"Oil", "#8B008B", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels prod" , "Biofuels", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out[y,"METHANE_TO_METHANOL","SLF"] * F_t [y,"METHANE_TO_METHANOL", h, td] - layers_in_out[y,"PYROLYSIS","SLF"] * F_t [y,"PYROLYSIS", h, td] - layers_in_out[y,"SYN_METHANOLATION","SLF"] * F_t [y,"SYN_METHANOLATION", h, td]
												- max(Storage_in [y,"SLF_STO", "SLF", h, td] - Storage_out [y,"SLF_STO", "SLF", h, td],0)) / 1000 ,
					"Oil", "#8B008B", "TWh" > (PathName & "/input2sankey.csv");
				}else{
				if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}( F_t [y,"METHANE_TO_METHANOL", h, td] + F_t [y,"PYROLYSIS", h, td] + F_t [y,"SYN_METHANOLATION", h, td]) > 10 then {
					printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels prod" , "Biofuels", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}( layers_in_out[y,"METHANE_TO_METHANOL","SLF"] * F_t [y,"METHANE_TO_METHANOL", h, td] - layers_in_out[y,"PYROLYSIS","SLF"] * F_t [y,"PYROLYSIS", h, td] - layers_in_out[y,"SYN_METHANOLATION","SLF"] * F_t [y,"SYN_METHANOLATION", h, td]
																					- max(Storage_in [y,"SLF_STO", "SLF", h, td] - Storage_out [y,"SLF_STO", "SLF", h, td],0)) / 1000 ,
					"Oil", "#8B008B", "TWh" > (PathName & "/input2sankey.csv");
				}
			}

			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"SLF_TO_DIESEL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "Diesel", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"SLF_TO_DIESEL","DIESEL"] * F_t [y,"SLF_TO_DIESEL", h, td]  ) / 1000 , "Oil", "#8B008B", "TWh"
					> (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"SLF_TO_GASOLINE", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "Gasoline", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"SLF_TO_GASOLINE","GASOLINE"] * F_t [y,"SLF_TO_GASOLINE", h, td]  ) / 1000 , "Oil", "#8B008B", "TWh"
					> (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"SLF_TO_LFO", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "Oil", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,"SLF_TO_LFO","LFO"] * F_t [y,"SLF_TO_LFO", h, td]  ) / 1000 , "Oil", "#8B008B", "TWh"
					> (PathName & "/input2sankey.csv");

			# Boilers
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"DEC_BOILER_GAS", h, td] + F_t [y,"DEC_BOILER_WOOD",
			h, td] + F_t [y,"DEC_BOILER_OIL", h, td])  ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Dec. sto",
					sum{i in {"DEC_BOILER_GAS","DEC_BOILER_OIL","DEC_BOILER_WOOD"}, j in TS_OF_DEC_TECH[i], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
						max(Storage_in [y,j , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,j , "HEAT_LOW_T_DECEN", h, td],0)/1000,
					"Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Heat LT Dec",
					sum{i in {"DEC_BOILER_GAS","DEC_BOILER_OIL","DEC_BOILER_WOOD"}, j in TS_OF_DEC_TECH[i], t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
						(layers_in_out[y,i,"HEAT_LOW_T_DECEN"] * F_t [y,i,h,td] - max(Storage_in [y,j , "HEAT_LOW_T_DECEN", h, td] - Storage_out [y,j , "HEAT_LOW_T_DECEN", h, td],0))/1000,
					"Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			}
			if sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]} max(Storage_out [y,i , "HEAT_LOW_T_DECEN", h, td] - Storage_in [y,i , "HEAT_LOW_T_DECEN", h, td],0) > 10 then
			   printf "%s,%s,%.2f,%s,%s,%s\n", "Dec. sto" , "Heat LT Dec", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t], i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]}
									max(Storage_out [y,i , "HEAT_LOW_T_DECEN", h, td] - Storage_in [y,i , "HEAT_LOW_T_DECEN", h, td],0)/1000 , "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");

			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"DHN_BOILER_GAS", h, td] + F_t [y,"DHN_BOILER_WOOD",
			h, td] + F_t [y,"DHN_BOILER_OIL", h, td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "DHN", sum{i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,i,"HEAT_LOW_T_DHN"] * F_t [y,i, h, td]  ) / 1000 , "Heat LT", "#FA8072", "TWh" >
					(PathName & "/input2sankey.csv");

			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}((F_t [y,"IND_BOILER_GAS", h, td] + F_t [y,"IND_BOILER_WOOD",
			h, td] + F_t [y,"IND_BOILER_OIL", h, td] + F_t [y,"IND_BOILER_COAL", h, td] + F_t [y,"IND_BOILER_WASTE", h, td])  ) > 10	then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Heat HT", sum{i in BOILERS, t in PERIODS, h in HOUR_OF_PERIOD[t], td in
					TYPICAL_DAY_OF_PERIOD[t]}(layers_in_out[y,i,"HEAT_HIGH_T"] * F_t [y,i, h, td]  ) / 1000 , "Heat HT", "#DC143C", "TWh" >
					(PathName & "/input2sankey.csv");

			# DHN
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(End_uses [y,"HEAT_LOW_T_DHN", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Heat LT DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(sum {i in TECHNOLOGIES diff STORAGE_TECH } (layers_in_out[y,i, "HEAT_LOW_T_DHN"] * F_t [y,i, h, td]  )
					- Network_losses [y,"HEAT_LOW_T_DHN", h, td]
					- sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"]} max(Storage_in [y,i, "HEAT_LOW_T_DHN", h, td] - Storage_out [y,i, "HEAT_LOW_T_DHN", h, td],0)) / 1000
					, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}(Network_losses [y,"HEAT_LOW_T_DHN", h, td]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Loss DHN", sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
					(Network_losses [y,"HEAT_LOW_T_DHN", h, td]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			if sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"] ,t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
			max(Storage_in [y,i, "HEAT_LOW_T_DHN", h, td] - Storage_out [y,i, "HEAT_LOW_T_DHN", h, td],0) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "DHN Sto", sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} max(Storage_in [y,i, "HEAT_LOW_T_DHN", h, td] - Storage_out [y,i, "HEAT_LOW_T_DHN", h, td],0)/1000
					, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN Sto", "Heat LT DHN", sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} max(Storage_out [y,i, "HEAT_LOW_T_DHN", h, td] - Storage_in [y,i, "HEAT_LOW_T_DHN", h, td],0)/1000
					, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			}

		}# END SAVING

}
#}}#End cartography loop
